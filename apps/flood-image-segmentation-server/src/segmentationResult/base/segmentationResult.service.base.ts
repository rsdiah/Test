/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  SegmentationResult as PrismaSegmentationResult,
} from "@prisma/client";

export class SegmentationResultServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SegmentationResultCountArgs, "select">
  ): Promise<number> {
    return this.prisma.segmentationResult.count(args);
  }

  async segmentationResults(
    args: Prisma.SegmentationResultFindManyArgs
  ): Promise<PrismaSegmentationResult[]> {
    return this.prisma.segmentationResult.findMany(args);
  }
  async segmentationResult(
    args: Prisma.SegmentationResultFindUniqueArgs
  ): Promise<PrismaSegmentationResult | null> {
    return this.prisma.segmentationResult.findUnique(args);
  }
  async createSegmentationResult(
    args: Prisma.SegmentationResultCreateArgs
  ): Promise<PrismaSegmentationResult> {
    return this.prisma.segmentationResult.create(args);
  }
  async updateSegmentationResult(
    args: Prisma.SegmentationResultUpdateArgs
  ): Promise<PrismaSegmentationResult> {
    return this.prisma.segmentationResult.update(args);
  }
  async deleteSegmentationResult(
    args: Prisma.SegmentationResultDeleteArgs
  ): Promise<PrismaSegmentationResult> {
    return this.prisma.segmentationResult.delete(args);
  }
}
