/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SegmentationResultService } from "../segmentationResult.service";
import { SegmentationResultCreateInput } from "./SegmentationResultCreateInput";
import { SegmentationResult } from "./SegmentationResult";
import { SegmentationResultFindManyArgs } from "./SegmentationResultFindManyArgs";
import { SegmentationResultWhereUniqueInput } from "./SegmentationResultWhereUniqueInput";
import { SegmentationResultUpdateInput } from "./SegmentationResultUpdateInput";

export class SegmentationResultControllerBase {
  constructor(protected readonly service: SegmentationResultService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SegmentationResult })
  async createSegmentationResult(
    @common.Body() data: SegmentationResultCreateInput
  ): Promise<SegmentationResult> {
    return await this.service.createSegmentationResult({
      data: data,
      select: {
        createdAt: true,
        id: true,
        imageReference: true,
        segmentationDate: true,
        segmentedFile: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SegmentationResult] })
  @ApiNestedQuery(SegmentationResultFindManyArgs)
  async segmentationResults(
    @common.Req() request: Request
  ): Promise<SegmentationResult[]> {
    const args = plainToClass(SegmentationResultFindManyArgs, request.query);
    return this.service.segmentationResults({
      ...args,
      select: {
        createdAt: true,
        id: true,
        imageReference: true,
        segmentationDate: true,
        segmentedFile: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SegmentationResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async segmentationResult(
    @common.Param() params: SegmentationResultWhereUniqueInput
  ): Promise<SegmentationResult | null> {
    const result = await this.service.segmentationResult({
      where: params,
      select: {
        createdAt: true,
        id: true,
        imageReference: true,
        segmentationDate: true,
        segmentedFile: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SegmentationResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSegmentationResult(
    @common.Param() params: SegmentationResultWhereUniqueInput,
    @common.Body() data: SegmentationResultUpdateInput
  ): Promise<SegmentationResult | null> {
    try {
      return await this.service.updateSegmentationResult({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          imageReference: true,
          segmentationDate: true,
          segmentedFile: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SegmentationResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSegmentationResult(
    @common.Param() params: SegmentationResultWhereUniqueInput
  ): Promise<SegmentationResult | null> {
    try {
      return await this.service.deleteSegmentationResult({
        where: params,
        select: {
          createdAt: true,
          id: true,
          imageReference: true,
          segmentationDate: true,
          segmentedFile: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
